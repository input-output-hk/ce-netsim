/**
 * Ffi for netsim
 *
 *
 * Copyright 2024, Input Output HK Ltd
 * Licensed with: Apache-2.0
 */

#ifndef NETSIM_LIBC
#define NETSIM_LIBC

/* Generated with cbindgen:0.26.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "netsim_extra.h"

enum SimError
{
  /**
   * the function succeed, no error
   */
  SimError_Success = 0,
  /**
   * An undefined error
   */
  SimError_Undefined = 1,
  /**
   * the function was called with an unexpected null pointer
   */
  SimError_NullPointerArgument = 3,
  /**
   * The function is not yet implemented, please report this issue
   * to maintainers
   */
  SimError_NotImplemented = 4,
  SimError_SocketDisconnected = 5,
};
typedef uint32_t SimError;

typedef struct SimContext SimContext;

typedef struct SimSocket SimSocket;

/**
 * Create a new NetSim Context
 *
 * This is configured so that messages of type Box<u8> can be shared through
 * the network between nodes.
 *
 * # Safety
 *
 * This function allocate a pointer upon success and returns the pointer
 * address. Call [`netsim_context_shutdown`] to release the resource.
 *
 */
SimError netsim_context_new(struct SimContext **output);

/**
 * create a new [`SimSocket`] in the given context
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 *
 */
SimError netsim_context_open(struct SimContext *context,
                             struct SimSocket **output);

/**
 * Shutdown a NetSim context and release assets
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 *
 */
SimError netsim_context_shutdown(struct SimContext *context);

/**
 * Access the unique dentifier of the [`SimSocket`]
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 *
 */
SimError netsim_socket_id(struct SimSocket *socket, SimId *id);

/**
 * Receive a message from the [`SimSocket`]
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 * This function will block until a message is received.
 * The function expects size to contain the size of the buffer provided.
 * The data received from the "socket" will be copied into the buffer up to the size but not beyond
 * This implies the buffer will not contain the whole message if the message length
 * is greater than the size of the provided buffer.
 * Finally the size is updated to reflect the length o the data copied into the buffer.
 * If no data is available from the socket, a NoMoreData error is returned.
 */
SimError netsim_socket_recv(struct SimSocket *socket,
                            uint8_t *msg,
                            uint64_t *size,
                            SimId *from);

/**
 * Release the new [`SimSocket`] resources
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 *
 */
SimError netsim_socket_release(struct SimSocket *socket);

/**
 * Send a message to the [`SimSocket`]
 *
 * # Safety
 *
 * The function checks for the context to be a nullpointer before trying
 * to utilise it. However if the value points to a random value then
 * the function may have unexpected behaviour.
 * This function returns immediately.
 *
 */
SimError netsim_socket_send_to(struct SimSocket *socket,
                               SimId to,
                               uint8_t *msg,
                               uint64_t size);

#endif /* NETSIM_LIBC */
